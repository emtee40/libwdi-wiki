<big>'''Installing and compiling libwdi'''</big>

== Latest official release ==

The latest official release of libwdi can be downloaded [https://bit.ly/3uIClte here].
Or you can also [https://github.com/pbatard/libwdi use git] to retrieve the latest development tree.

== Prerequisites ==

Compilation of libwdi is supported for the following environments, with the restrictions indicated below:
* [https://bit.ly/3APnwJ5 MinGW] (32 bit):<br />Will only allow the production of a 32 bit library, which is incompatible with 64 bit Windows platforms. The produced binary can be used on Windows 7 or later.

* [https://bit.ly/3APnwJ5 MinGW-w64] (64 bit):<br />By default, will only produce 64 bit binaries, that are incompatible with 32 bit platforms. However, you can [http://pete-tech.blogspot.com/2010/07/compiling-mingw-w64-with-multilib-on.html recompile MinGW-w64 so that it supports the -m32 option] (for production of 32 bit binaries) or try to find a pre-built (and working!) multilib version to produce 32 bit binaries that are compatible with 64 bit platforms.

* [https://www.visualstudio.com/vs/community/ Microsoft Visual Studio], either 2019 or later:<br/> The Community Edition (CE) is recommended for anyone, even if you are a corporate/enterprise user, as libwdi is an Open Source project using an OSI-approved license, therefore, as long as you use Visual Studio CE with libwdi, there are '''no restriction''' to your ability to freely install and use Visual Studio.<br/>A very comprehensive walk-through on how to install Visual Studio Community Edition to compile and debug libwdi/Zadig is available [[Compiling-and-debugging-libwdi-or-Zadig|here]]. Note that, even though Visual Studio comes with a partial WDK, you will also need to install the Redistributable WDK 8 Components [https://go.microsoft.com/fwlink/p/?LinkID=253170 from here] to enable WinUSB installation.

* Cross compilation:<br />Is supported, as per git revision w120 (or libwdi v1.0.3). The standard <code>--host=<host-triplet></code> option can be applied to either <code>configure</code> or <code>autogen.sh</code><br />Because the building if libwdi relies on running a custom embedder during the build process, your build platform must be able to compile code that can run on the platform. As such, you might have to specify the <code>CC_FOR_BUILD</code> environment variable with the relevant options for your build environment. For more information, have a look at the [[FAQ#wiki-Is_it_possible_to_crosscompile_libwdi|FAQ]].

Depending on the driver files you are planning to enable in libwdi, you may also require:
* The latest <code>libusb0.sys</code> driver files from [https://tracker.iplocation.net/ikec/  libusb-win32]
* The latest <code>libusbK.sys</code> driver files from [http://code.google.com/p/usb-travis/ libusbK].

MinGW compilation also requires the following packages to be installed:
* autotools (automake, autoconf, libtool), if running the <code>autogen.sh</code> from git
* getopt, to compile the wdi-simple sample

== Configuration & Compilation ==

'''IMPORTANT''': If you are not using the WDK 8 redistributable components, you '''must''' edit your config.h and set <code>WDF_VER</code> to the relevant WDF version. For instance, if you used the WinUSB installer files from WinDDK 7600.16385.0, you should use: <code>WDF_VER=1009</code> (when compiling with MS compilers) or add the option <code>--with-wdfver=1009</code> when invoking <code>configure</code> (MinGW).

Provided that you have one of the environments highlighted above and retrieved the source (either from a tarball or the git repository), you need to configure the building of libwdi as follows:

* '''MinGW, cygwin or cross compilation''':<br />
** (Optional) If cross-compiling, and if the default CC (as detected by configure) does not produce executables that can run on your platform, define a <code>CC_FOR_BUILD</code> environment variable with the required options.
** (Optional) If downloaded from git, from a shell prompt, run <code>./autogen.sh</code>. This is required to create the configure and Makefile scripts. You can feed the same options to autogen.sh as the ones you feed to configure<br />
** Run <code>configure --help</code> to select your options, or refer to the list below, and then run <code>configure</code>:
*** <code>--enable-shared</code>: build shared libraries (default y)
*** <code>--enable-static</code>: build static libraries (default y)
*** <code>--enable-32bit</code>: build 32 bit compatible library if -m32 is available (default y)
*** <code>--enable-64bit</code>: build 64 bit compatible library if -m64 is available (default y)
*** <code>--enable-log</code>: enable library logging (default y)
*** <code>--enable-debug-log</code>: force debug logging (cannot be disabled, default n)
*** <code>--enable-toggable-debug</code>: enable switchable debug logging (default n)
*** <code>--enable-debug</code>: include debug symbols for gdb (default y)
*** <code>--enable-examples-build</code>: build example applications (default n)
*** <code>--with-wdkdir="<dir>"</code>: embed WDK redistributable components files from the following location
*** <code>--with-libusb0="<dir>"</code>: embed libusb0 driver files from the following location
*** <code>--with-libusbk="<dir>"</code>: embed libusbK driver files from the following location
*** <code>--with-userdir="<dir>"</code>: embed user defined driver files from the following location<br />Notes:
***# '''At least one of <code>--with-wdkdir</code>, <code>--with-libusb0</code>, <code>--with-libusbK</code>, <code>--with-userdir</code> must be specified when running <code>configure</code>'''.
***# If not cross-compiling, configure will check the WDK, libusb0 and libusbK directories for the relevant driver files, and alert you if they are not found.
** Run '<code>make</code>'
** The resulting library and examples can be retrieved in the <code>.libs</code> directory

* '''Visual Studio''':<br />
** Edit the file msvc/config.h to set/modify your options, or refer to the list below:
*** <code>#define WDK_DIR "<dir>"</code>: embed WDK redistributable components from the following location
*** <code>#define LIBUSB0_DIR "<dir>"</code>: embed libusb-win32 driver files from the following location
*** <code>#define LIBUSBK_DIR "<dir>"</code>: embed libusbK driver files from the following location
*** <code>#define USER_DIR "<dir>"</code>: embed user defined driver files from the following location
*** <code>#define OPT_M32</code>: build 32 bit compatible library if possible
*** <code>#define OPT_M64</code>: build 64 bit compatible library if possible
*** <code>#define ENABLE_LOGGING</code>: enable library logging
*** <code>#define ENABLE_DEBUG_LOGGING</code>: force debug logging (cannot be disabled)
*** <code>#define INCLUDE_DEBUG_LOGGING</code>: enable switchable debug logging
*** <code>#define WDF_VER</code>: define the version of the WDF CoInstaller for WinUSB. If you are using the current version, this should be set to "01011"<br />Notes:
***# '''Make sure you edit <code>msvc/config.h</code> and set at least one of <code>WDK_DIR</code>, <code>LIBUSB0_DIR</code>, <code>LIBUSBK_DIR</code> or <code>USER_DIR</code> to a valid directory'''.
** Select your target (Release/Debug, Win32/x64) and select 'Build'
** The resulting library and examples can be retrieved from <code><arch>\<Release|Debug></code> (eg: <code>.\x64\Release\</code>)

== Using a custom driver file with libwdi ==

If you have a custom driver that you would like to use with libwdi (eg, a custom USB .sys file and DLL, or a driver with a signed .inf+.cat), you can configure libwdi to install your driver instead of libusb0/libusbK/WinUSB:

# Create a directory containing all the required driver files you need to embed in the library. This directory will be parsed recursively when creating the library, and recreated with the exact same structure (but in the libwdi user directory) before installation.
# Use either the <code>--with-userdir</code> option when running configure ('''MinGW/cross-compilation''') or set the <code>#define USER_DIR in msvc/config.h</code> ('''MS environments''') to point to the directory above. You can also setup the WinUSB, libusb0 or libusbK directories if you want to include these driver files as well.
# In your application, use <code>wdi_prepare_driver()</code> with the driver_type set to <code>WDI_USER</code> for the options parameter (or, if this is the only driver embedded, you can leave the options blank) and call wdi_install_driver with the name of your inf file.

Notes:
# Unless you manually edit <code>libdwi/embedder_files.h</code> it is not possible to differentiate between a 32 bit or 64 bit install, so both the 32 and 64 bit driver files must be included in your directory
# Because it is impossible for libwdi to guess how the inf file for a custom driver should be generated, you must provide your own inf file along with the driver, and set all its parameters accordingly.