<h4>'''libwdi: Windows Driver Installer library for USB devices'''</h4>
[[images/libwdi.png]]
= Description =
== '''About''' ==

The aim of this project is to provide Windows application developers and driver makers, with a convenient way of extracting and installing USB drivers on end-users systems. Such drivers can then be used with, but not limited to, libusb applications using [http://libusbx.org/ libusbx], [http://sourceforge.net/apps/trac/libusb-win32/wiki libusb-win32] or [http://code.google.com/p/usb-travis/ libusbK].

== '''Getting Support''' ==

If you have a question that cannot be answered in these pages, your best option is to send a mail to the [http://lists.sourceforge.net/lists/listinfo/libwdi-devel libwdi-devel mailing list] (registration required). Or you can also try to e-mail [mailto://pete@akeo.ie?subject=libwdi the developers] directly.

== '''Features''' ==

=== Main Features ===

* Automated '''signed''' driver package creation and installation, using the name reported by the USB device
* '''No''' security warnings during driver installation, when running in elevated mode
* One-off [[WCID Devices|WCID device]] driver installation support, so that no further driver installation is required for any WCID device of the same type
* Dual 32 and 64 bit platform support
* Supports any Windows platforms, from Windows XP up to Windows 8
* Single library that can be statically or dynamically linked to your application in order to provide driver installation facilities at runtime

=== Additional Features ===

* Embedding of [http://msdn.microsoft.com/en-us/library/windows/hardware/ff540174.aspx WinUSB] ([http://libusbx.org libusbx], [http://libusbdotnet.sf.net LibUsbDotNet], native), [http://sourceforge.net/apps/trac/libusb-win32/wiki libusb-win32], [http://code.google.com/p/usb-travis libusbK] or your own USB drivers (eg. [http://msdn.microsoft.com/en-us/windows/hardware/gg487530.aspx WHQL])
* [http://sourceforge.net/apps/trac/libusb-win32/wiki libusb-win32] filter driver support
* UAC elevation, where necessary
* Full locale support with UTF-8 API strings and UTF-16 autogenerated inf files
* Resolution of USB Vendor IDs, based on the [http://www.linux-usb.org/usb-ids.html USB ID Repository]
* Fully Open Source ([http://www.gnu.org/licenses/lgpl.html LGPL v3]), with many example applications
* Supports [http://www.mingw.org/ MinGW], [http://mingw-w64.sourceforge.net/ MinGW-w64], [http://www.microsoft.com/visualstudio/en-us Visual Studio], [http://msdn.microsoft.com/en-us/windows/hardware/gg487428 WDK]

= Downloads =

* <h4>'''[http://sourceforge.net/projects/libwdi/files/releases/libwdi-1.2.1.tar.gz/download libwdi v1.2.1]''' (released 2011.11.02)</h4>
* <h4>'''[http://sourceforge.net/projects/libwdi/files/releases/ All libwdi releases]'''</h4>
* <h4>'''[http://sourceforge.net/projects/libwdi/files/zadig/ Zadig]'''</h4>
[[Zadig]] is a standalone driver installer GUI application, built on libwdi and ready to run. You may have to install a decompressor, such as [http://www.7-zip.org/download.html 7-zip], to be able to uncompress the .7z file.

= Documentation =

# <h4>'''[[FAQ]]'''</h4>
# <h4>'''[[Zadig|Using Zadig (the GUI driver installer application)]]'''</h4>
# <h4>'''[[install|Library Installation & Configuration]]'''</h4>
# <h4>'''[[usage|Library API Documentation & Usage]]'''</h4>
# <h4>'''[[signed_driver_walkthrough|Signed driver installation walkthrough]]'''</h4>
# <h4>'''[[WCID Devices]]'''</h4>

= Reusable Code Parts: Can our code solve your problems? =

As a FOSS developer, there's nothing more frustrating than having to reinvent the wheel while harbouring a strong suspicion that someone, somewhere, might already have solved a similar issue.
On the other hand, googling around and looking through scores of FOSS code listings to find that particular section of code which might be of interest to you is quite time consuming. Wouldn't it be just swell if the developers simply gave an detailed, high level overview of the problems they solved, whose solutions they think you can reuse?

The following page does just that and goes through a list of the features we implemented, which you might be interested in (provided your license is compatible with LGPL):
* <h4 style="margin:0; padding:0">'''[[reuse|Libwdi Reuse]]'''</h4>

= Development =

== '''Supported Environments''' ==

The following development environments are currently supported for libwdi on Windows:
* [http://www.mingw.org MinGW] (32 bit) or [http://mingw-w64.sourceforge.net/ MinGW-w64]. To compile a library that is both 32 and 64 bit compatible, you should use a version of MinGW-w64 that supports both -m32 and -m64 (a.k.a. "multilib"). [http://tdm-gcc.tdragon.net/download TDM64] is a good MinGW-w64 distribution under Windows which fulfils this requirement.
* [http://msdn.microsoft.com/en-us/visualc/default.aspx Microsoft Visual C++ (Visual Studio) 2008]. Only the full version will allow you to produce 64 bit or or 32+64 bit binaries.
* [http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=36a2630f-5d56-43b5-b996-7633f2ec14ff Windows DDK build environment], which is '''freely available''', through the use of the 'ddk_build.cmd' file. This will also produce all of 32, 64 or 32+64 bits binaries. Note that if you want to produce libwdi applications that are compatible with all supported platforms from XP onwards, '''you will need to use the Windows XP WDK build environment for the 32bit builds and Windows Server 2003 build environment for the 64bit build'''.

The recommended development environment to compile the library/apps is the latest Windows WDK as it allows the building of a 32+64 bit compatible library, and ensures that the required WinUSB DLL files are available.

== '''Source''' ==

The current development tree is available from our [http://libwdi.git.sourceforge.net/git/gitweb.cgi?p=libwdi/libwdi SourceForge repository].

For those not familiar with git, here are the git commands you can use retrieve and compile libwdi:
<pre>
git clone git://libwdi.git.sourceforge.net/gitroot/libwdi/libwdi ; retrieve development branch (this only needs to be done once)
git pull                                                         ; for further updates, once the clone has been done
</pre>

If you don't want to use git from the commandline, you can use [http://code.google.com/p/tortoisegit TortoiseGit] or [http://code.google.com/p/gitextensions/ Git Extensions] to access and keep in sync with the git repository.
Git Extensions comes ready to use, but note that before you can install [http://code.google.com/p/tortoisegit TortoiseGit] you need to install [http://code.google.com/p/msysgit MSysGit].

Also note that, for MinGW you need to run <code>./autogen.sh</code> (after editing it according to your paths) or run the autotools creation utilities, in order to have configure and Makefile created for you.

To create projects relying on libwdi, please refer to how the sample executables zadic, wdi-simple (console) and zadig (GUI) are compiled.

== '''Development Considerations''' ==

* Because the driver installation requires administrative privileges, but enumeration does not, the library compiled and embeds a 32/64 bit installer, that requires UAC elevation on platforms supporting UAC (Windows Vista and later).
* The project also uses a customer embedder to include the required driver resources (DLLs, 32 and 64 bit installer) along with any files you want to add (eg. signed inf).
* The reliance on DifXAPI.dll was dropped in w20, as the DLL is not available by default on XP and would increase the binary size.
* It is possible to produce a 32 bit library that is 32+64 bit compatible, but the opposite is not true. As such, when compiling for 64 bit, 32 bit compatibility will be removed to make the library smaller.

== '''Progress''' ==

'''To Do'''
* Downloading vs embedding of the driver files
* 7z based improved embedder

'''In Progress'''
* Standalone signing utilities for the MinGW-w64 project

'''Done'''
* libusb-win32 filter driver support
* WCID driver support
* provision of a custom GUID and other inf features
* self signed .cat creation, for promptless install
* disabling of the creation of a restore point
* libusbK support
* trusted publisher certificate installation for promptless install
* cross-compilation & embedder improvements
* GUI sample application (zadig)
* Documentation
* allow the editing of the device name
* libusb0.sys driver support
* MinGW/cygwim/MSVC/DDK support
* 32 and 64 bit support and compilation time detection
* UAC elevation
* retrieval of device name
* automated inf generation

== '''Status log''' ==

Please consult the '''[http://libwdi.git.sourceforge.net/git/gitweb.cgi?p=libwdi/libwdi;a=summary git log]''' or the WDI section of the '''raw''' [[Activity Log]].

== '''Links''' ==

* [http://msdn.microsoft.com/en-us/library/ms790227.aspx Writing a Device Installation Application]
* [http://msdn.microsoft.com/en-us/library/aa906206.aspx Determining Whether a Device Is Plugged In and removal of phantom devices]
* [http://msdn.microsoft.com/en-us/library/bb530410.aspx#vistauac_topic3 Installer Detection for 32 bit applications]
* [http://jpassing.com/2008/02/01/how-to-use-manifests-with-buildexe/ Embedding manifests (for UAC elevation) with the DDK build environment]
* [http://www.microsoft.com/whdc/driver/install/setupapilog.mspx Troubleshooting Device Installation with the SetupAPI Log File]
* [http://www.microsoft.com/whdc/driver/install/diagnose.mspx Debugging Device Installation in Windows Vista]
* [http://support.microsoft.com/kb/179378 How To Browse for Folders from the Current Directory]
* [http://msdn.microsoft.com/en-us/library/aa511279.aspx UI] [http://msdn.microsoft.com/en-us/library/aa511453.aspx design] [http://msdn.microsoft.com/en-us/library/aa511458.aspx guidelines] from MSDN
* [http://msdn.microsoft.com/en-us/library/ms997646.aspx Setting Visual Styles]
* [http://msdn.microsoft.com/en-us/library/bb760728.aspx Creating Status Bars]
* [http://www.microsoft.com/whdc/driver/install/drvsign/pnp-driver.mspx How Windows elects the driver to use against a newly plugged device]
* [http://msdn.microsoft.com/en-us/library/ff545473%28VS.85%29.aspx Using INX Files to Create INF Files]
* [http://msdn.microsoft.com/en-us/library/ff553377.aspx Summary of INF Sections]
* [http://msdn.microsoft.com/en-us/library/aa380252.aspx Microsoft's cryptographic functions]
* [http://www.jensign.com/JavaScience/cryptoutils/index.html Cryptographic Utilities by Michel Gallant]
----
<center>[[images/CC_BY-SA.png|link=http://creativecommons.org/licenses/by-sa/3.0/]]</center>